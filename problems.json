[{"title":"2812. Find the Safest Path in a Grid","description":"You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n\n\n\tA cell containing a thief if grid[r][c] = 1\n\tAn empty cell if grid[r][c] = 0\n\n\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\n\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\n\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\n\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\n\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n\n \nExample 1:\n\nInput: grid = [[1,0,0],[0,0,0],[0,0,1]]\nOutput: 0\nExplanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n\n\nExample 2:\n\nInput: grid = [[0,0,1],[0,0,0],[0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\n\nExample 3:\n\nInput: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\n\n \nConstraints:\n\n\n\t1 <= grid.length == n <= 400\n\tgrid[i].length == n\n\tgrid[i][j] is either 0 or 1.\n\tThere is at least one thief in the grid.\n\n","difficulty":"Medium","acceptance":25.46479449234979,"frequency":179.56207718530868,"topics":[["Heap (Priority Queue)","Randomized","Probability and Statistics","Bucket Sort","Tree","Strongly Connected Component","Dynamic Programming","Counting","Two Pointers","Bitmask"]],"languages":[["Python","Dart","Erlang","Go","Racket","Python3","Java","Swift","Kotlin","Scala"]]},{"title":"2812. Find the Safest Path in a Grid","description":"You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n\n\n\tA cell containing a thief if grid[r][c] = 1\n\tAn empty cell if grid[r][c] = 0\n\n\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\n\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\n\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\n\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\n\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n\n \nExample 1:\n\nInput: grid = [[1,0,0],[0,0,0],[0,0,1]]\nOutput: 0\nExplanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n\n\nExample 2:\n\nInput: grid = [[0,0,1],[0,0,0],[0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\n\nExample 3:\n\nInput: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n\n\n \nConstraints:\n\n\n\t1 <= grid.length == n <= 400\n\tgrid[i].length == n\n\tgrid[i][j] is either 0 or 1.\n\tThere is at least one thief in the grid.\n\n","difficulty":"Medium","acceptance":24.785099564886707,"frequency":35.50670699469329,"topics":[["Reservoir Sampling","Backtracking","Database","Merge Sort","Hash Table","Segment Tree","Matrix","Sliding Window","Randomized","Binary Tree"]],"languages":[["Python","Elixir","TypeScript","Erlang","Scala","C","C++","Swift","Racket","PHP"]]},{"title":"1. Two Sum","description":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n\n \nConstraints:\n\n\n\t2 <= nums.length <= 104\n\t-109 <= nums[i] <= 109\n\t-109 <= target <= 109\n\tOnly one valid answer exists.\n\n\n \nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?","difficulty":"Easy","acceptance":22.791464724117596,"frequency":45.73515484258788,"topics":[["Prefix Sum","Database","Suffix Array","Collapse","Dynamic Programming","Linked List","Combinatorics","Depth-First Search","Tree","Design"]],"languages":[["C#","Scala","Rust","Kotlin","Go","PHP","Java","Racket","C","Python3"]]},{"title":"2. Add Two Numbers","description":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n \nExample 1:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in each linked list is in the range [1, 100].\n\t0 <= Node.val <= 9\n\tIt is guaranteed that the list represents a number that does not have leading zeros.\n\n","difficulty":"Medium","acceptance":75.50147585877318,"frequency":50.33078667307641,"topics":[["Tree","Bitmask","Collapse","Suffix Array","Divide and Conquer","Combinatorics","Hash Table","Hash Function","Bit Manipulation","Memoization"]],"languages":[["Go","Elixir","Scala","Rust","Python","Swift","TypeScript","PHP","Dart","Python3"]]},{"title":"3. Longest Substring Without Repeating Characters","description":"Given a string s, find the length of the longest substring without repeating characters.\n\n \nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n\n \nConstraints:\n\n\n\t0 <= s.length <= 5 * 104\n\ts consists of English letters, digits, symbols and spaces.\n\n","difficulty":"Medium","acceptance":5.84352123719636,"frequency":111.61940100503183,"topics":[["Binary Indexed Tree","Ordered Set","Eulerian Circuit","Line Sweep","Merge Sort","String Matching","Concurrency","Collapse","Two Pointers","Database"]],"languages":[["Rust","Swift","Python","JavaScript","Elixir","Go","Kotlin","Racket","Scala","Dart"]]},{"title":"4. Median of Two Sorted Arrays","description":"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).\n\n \nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\n\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n\n \nConstraints:\n\n\n\tnums1.length == m\n\tnums2.length == n\n\t0 <= m <= 1000\n\t0 <= n <= 1000\n\t1 <= m + n <= 2000\n\t-106 <= nums1[i], nums2[i] <= 106\n\n","difficulty":"Hard","acceptance":5.518079219645226,"frequency":121.70939656653945,"topics":[["Eulerian Circuit","Game Theory","Brainteaser","Sorting","Ordered Set","Design","Hash Table","Binary Search Tree","Graph","Shortest Path"]],"languages":[["Java","Erlang","Python","Kotlin","Racket","Python3","Ruby","PHP","JavaScript","Rust"]]},{"title":"5. Longest Palindromic Substring","description":"Given a string s, return the longest palindromic substring in s.\n\n \nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 1000\n\ts consist of only digits and English letters.\n\n","difficulty":"Medium","acceptance":31.83775767131084,"frequency":61.069560749250634,"topics":[["Eulerian Circuit","Hash Table","Array","Reservoir Sampling","Concurrency","Binary Tree","Design","Linked List","Shell","Matrix"]],"languages":[["Java","Rust","Go","Python","Scala","PHP","TypeScript","C#","C++","Ruby"]]},{"title":"6. Zigzag Conversion","description":"The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n\n\n \nExample 1:\n\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n\n\nExample 2:\n\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\n\nExample 3:\n\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 1000\n\ts consists of English letters (lower-case and upper-case), ',' and '.'.\n\t1 <= numRows <= 1000\n\n","difficulty":"Medium","acceptance":21.25262393995358,"frequency":182.61663364430152,"topics":[["Graph","Line Sweep","Counting Sort","Stack","Rejection Sampling","Interactive","Dynamic Programming","Trie","Probability and Statistics","Recursion"]],"languages":[["C++","C","Python3","PHP","Erlang","Scala","Go","Ruby","Racket","Dart"]]},{"title":"7. Reverse Integer","description":"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n \nExample 1:\n\nInput: x = 123\nOutput: 321\n\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\n\nExample 3:\n\nInput: x = 120\nOutput: 21\n\n\n \nConstraints:\n\n\n\t-231 <= x <= 231 - 1\n\n","difficulty":"Medium","acceptance":66.3638219056781,"frequency":166.2140701071685,"topics":[["Sorting","Doubly-Linked List","Rolling Hash","Binary Indexed Tree","Eulerian Circuit","Game Theory","Depth-First Search","Line Sweep","Segment Tree","Brainteaser"]],"languages":[["Racket","Go","C","Dart","C++","C#","PHP","Rust","Python","TypeScript"]]},{"title":"8. String to Integer (atoi)","description":"Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\n\nThe algorithm for myAtoi(string s) is as follows:\n\n\n\tWhitespace: Ignore any leading whitespace (\" \").\n\tSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\n\tConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\n\tRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\n\n\nReturn the integer as the final result.\n\n \nExample 1:\n\n\nInput: s = \"42\"\n\nOutput: 42\n\nExplanation:\n\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\n\n\n\nExample 2:\n\n\nInput: s = \" -042\"\n\nOutput: -42\n\nExplanation:\n\nStep 1: \"   -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^\n\n\n\nExample 3:\n\n\nInput: s = \"1337c0d3\"\n\nOutput: 1337\n\nExplanation:\n\nStep 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^\n\n\n\nExample 4:\n\n\nInput: s = \"0-1\"\n\nOutput: 0\n\nExplanation:\n\nStep 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^\n\n\n\nExample 5:\n\n\nInput: s = \"words and 987\"\n\nOutput: 0\n\nExplanation:\n\nReading stops at the first non-digit character 'w'.\n\n\n \nConstraints:\n\n\n\t0 <= s.length <= 200\n\ts consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.\n\n","difficulty":"Medium","acceptance":53.75652356808499,"frequency":38.4923793864159,"topics":[["Two Pointers","Greedy","Shell","Randomized","Recursion","Graph","Merge Sort","Data Stream","Enumeration","Shortest Path"]],"languages":[["Racket","TypeScript","Python3","PHP","Dart","Swift","Scala","Kotlin","C","Elixir"]]},{"title":"9. Palindrome Number","description":"Given an integer x, return true if x is a palindrome, and false otherwise.\n\n \nExample 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n\n\nExample 2:\n\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n\nExample 3:\n\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n\n \nConstraints:\n\n\n\t-231 <= x <= 231 - 1\n\n\n \nFollow up: Could you solve it without converting the integer to a string?","difficulty":"Easy","acceptance":49.81112832469995,"frequency":117.06713204390185,"topics":[["Divide and Conquer","Simulation","Matrix","Collapse","Depth-First Search","Bitmask","Backtracking","Strongly Connected Component","Monotonic Queue","Combinatorics"]],"languages":[["PHP","Python","C#","C","Elixir","Racket","Kotlin","Java","Scala","Go"]]},{"title":"10. Regular Expression Matching","description":"Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n\n\t'.' Matches any single character.​​​​\n\t'*' Matches zero or more of the preceding element.\n\n\nThe matching should cover the entire input string (not partial).\n\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\n\nExample 3:\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 20\n\t1 <= p.length <= 20\n\ts contains only lowercase English letters.\n\tp contains only lowercase English letters, '.', and '*'.\n\tIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n","difficulty":"Hard","acceptance":31.525896437618677,"frequency":25.63836983136596,"topics":[["Combinatorics","Hash Function","Rejection Sampling","String","Design","Enumeration","Topological Sort","Iterator","Shortest Path","Reservoir Sampling"]],"languages":[["Racket","JavaScript","Erlang","Rust","C#","Java","PHP","C","Elixir","TypeScript"]]},{"title":"11. Container With Most Water","description":"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.\n\n \nExample 1:\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\n\nExample 2:\n\nInput: height = [1,1]\nOutput: 1\n\n\n \nConstraints:\n\n\n\tn == height.length\n\t2 <= n <= 105\n\t0 <= height[i] <= 104\n\n","difficulty":"Medium","acceptance":35.52044381361762,"frequency":126.35730371186521,"topics":[["Data Stream","Biconnected Component","Matrix","Rolling Hash","Bitmask","Binary Indexed Tree","Linked List","Enumeration","Shell","String Matching"]],"languages":[["C++","PHP","Kotlin","Rust","TypeScript","Dart","Swift","Go","Elixir","Racket"]]},{"title":"12. Integer to Roman","description":"Seven different symbols represent Roman numerals with the following values:\n\nSymbolValueI1V5X10L50C100D500M1000\n\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\n\n\tIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\n\tIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\n\tOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\n\n\nGiven an integer, convert it to a Roman numeral.\n\n \nExample 1:\n\n\nInput: num = 3749\n\nOutput: \"MMMDCCXLIX\"\n\nExplanation:\n\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\n\n\nExample 2:\n\n\nInput: num = 58\n\nOutput: \"LVIII\"\n\nExplanation:\n\n50 = L\n 8 = VIII\n\n\n\nExample 3:\n\n\nInput: num = 1994\n\nOutput: \"MCMXCIV\"\n\nExplanation:\n\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\n\n\n \nConstraints:\n\n\n\t1 <= num <= 3999\n\n","difficulty":"Medium","acceptance":69.53805686174799,"frequency":126.04076187029037,"topics":[["Queue","Eulerian Circuit","Rejection Sampling","Geometry","Data Stream","Binary Indexed Tree","Interactive","Segment Tree","Simulation","Shortest Path"]],"languages":[["Erlang","Rust","Python","Elixir","TypeScript","Go","Racket","PHP","Ruby","C++"]]},{"title":"13. Roman to Integer","description":"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n\n\tI can be placed before V (5) and X (10) to make 4 and 9. \n\tX can be placed before L (50) and C (100) to make 40 and 90. \n\tC can be placed before D (500) and M (1000) to make 400 and 900.\n\n\nGiven a roman numeral, convert it to an integer.\n\n \nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 15\n\ts contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\n\tIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\n\n","difficulty":"Easy","acceptance":73.2230448591769,"frequency":42.69713802710225,"topics":[["Segment Tree","Matrix","Suffix Array","Depth-First Search","Backtracking","Greedy","Number Theory","Shortest Path","Topological Sort","Strongly Connected Component"]],"languages":[["Python","Erlang","Python3","Elixir","Go","Java","C","C++","Scala","Ruby"]]},{"title":"14. Longest Common Prefix","description":"Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n \nExample 1:\n\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\n\nExample 2:\n\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n\n \nConstraints:\n\n\n\t1 <= strs.length <= 200\n\t0 <= strs[i].length <= 200\n\tstrs[i] consists of only lowercase English letters.\n\n","difficulty":"Easy","acceptance":32.321074411546284,"frequency":94.84768952257085,"topics":[["Trie","Binary Search","Binary Tree","Doubly-Linked List","Hash Function","Breadth-First Search","Data Stream","Bitmask","Combinatorics","Prefix Sum"]],"languages":[["Racket","C#","Python","Kotlin","C","PHP","Go","Scala","TypeScript","Rust"]]},{"title":"15. 3Sum","description":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n\n \nConstraints:\n\n\n\t3 <= nums.length <= 3000\n\t-105 <= nums[i] <= 105\n\n","difficulty":"Medium","acceptance":15.968693555218225,"frequency":24.25742974528532,"topics":[["Trie","Binary Search","Line Sweep","Queue","Union Find","Probability and Statistics","Minimum Spanning Tree","Game Theory","Quickselect","Simulation"]],"languages":[["Swift","Go","Erlang","Ruby","C#","Kotlin","TypeScript","C","Python","Elixir"]]},{"title":"16. 3Sum Closest","description":"Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n\nReturn the sum of the three integers.\n\nYou may assume that each input would have exactly one solution.\n\n \nExample 1:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n\nExample 2:\n\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n\n\n \nConstraints:\n\n\n\t3 <= nums.length <= 500\n\t-1000 <= nums[i] <= 1000\n\t-104 <= target <= 104\n\n","difficulty":"Medium","acceptance":43.77558769587108,"frequency":146.84685879038886,"topics":[["Rejection Sampling","Divide and Conquer","Bit Manipulation","Queue","Recursion","Topological Sort","Geometry","Binary Search Tree","Stack","Simulation"]],"languages":[["Java","Dart","Kotlin","Python","Swift","C#","Python3","Rust","C","PHP"]]},{"title":"17. Letter Combinations of a Phone Number","description":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n \nExample 1:\n\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n\n\nExample 2:\n\nInput: digits = \"\"\nOutput: []\n\n\nExample 3:\n\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n\n\n \nConstraints:\n\n\n\t0 <= digits.length <= 4\n\tdigits[i] is a digit in the range ['2', '9'].\n\n","difficulty":"Medium","acceptance":29.035181110704755,"frequency":161.70798810331732,"topics":[["Simulation","Iterator","Divide and Conquer","Monotonic Queue","Line Sweep","Tree","Radix Sort","Combinatorics","Stack","Linked List"]],"languages":[["Python3","Erlang","C++","Elixir","Ruby","JavaScript","PHP","Scala","Racket","Dart"]]},{"title":"18. 4Sum","description":"Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n\n\t0 <= a, b, c, d < n\n\ta, b, c, and d are distinct.\n\tnums[a] + nums[b] + nums[c] + nums[d] == target\n\n\nYou may return the answer in any order.\n\n \nExample 1:\n\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 200\n\t-109 <= nums[i] <= 109\n\t-109 <= target <= 109\n\n","difficulty":"Medium","acceptance":35.43762268046834,"frequency":41.54795136703542,"topics":[["Linked List","Eulerian Circuit","Biconnected Component","Backtracking","String Matching","Randomized","Segment Tree","Math","Brainteaser","Rejection Sampling"]],"languages":[["C++","Swift","Elixir","TypeScript","Java","Kotlin","JavaScript","C","Racket","Erlang"]]},{"title":"19. Remove Nth Node From End of List","description":"Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\n \nExample 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the list is sz.\n\t1 <= sz <= 30\n\t0 <= Node.val <= 100\n\t1 <= n <= sz\n\n\n \nFollow up: Could you do this in one pass?\n","difficulty":"Medium","acceptance":66.40817648918947,"frequency":6.52539167932662,"topics":[["Strongly Connected Component","Binary Indexed Tree","Doubly-Linked List","Backtracking","Tree","Brainteaser","Binary Search","Biconnected Component","Heap (Priority Queue)","Hash Table"]],"languages":[["C++","Python3","Racket","Dart","TypeScript","Erlang","Python","Scala","PHP","Kotlin"]]},{"title":"20. Valid Parentheses","description":"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n\n\tOpen brackets must be closed by the same type of brackets.\n\tOpen brackets must be closed in the correct order.\n\tEvery close bracket has a corresponding open bracket of the same type.\n\n\n \nExample 1:\n\nInput: s = \"()\"\nOutput: true\n\n\nExample 2:\n\nInput: s = \"()[]{}\"\nOutput: true\n\n\nExample 3:\n\nInput: s = \"(]\"\nOutput: false\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 104\n\ts consists of parentheses only '()[]{}'.\n\n","difficulty":"Easy","acceptance":28.809054155792282,"frequency":91.78006957927917,"topics":[["Topological Sort","Array","Shell","Number Theory","String","Binary Indexed Tree","Design","Radix Sort","Enumeration","Tree"]],"languages":[["Racket","Python3","Java","Rust","PHP","Ruby","Swift","Python","C#","Dart"]]},{"title":"21. Merge Two Sorted Lists","description":"You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.\n\n \nExample 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in both lists is in the range [0, 50].\n\t-100 <= Node.val <= 100\n\tBoth list1 and list2 are sorted in non-decreasing order.\n\n","difficulty":"Easy","acceptance":67.09362911022585,"frequency":164.51721575582604,"topics":[["Tree","Backtracking","Breadth-First Search","Randomized","Eulerian Circuit","Queue","Sorting","Radix Sort","Divide and Conquer","Counting Sort"]],"languages":[["Scala","TypeScript","Elixir","Erlang","C++","Swift","JavaScript","Dart","Python","Ruby"]]},{"title":"22. Generate Parentheses","description":"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n \nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n\n \nConstraints:\n\n\n\t1 <= n <= 8\n\n","difficulty":"Medium","acceptance":45.4395971773427,"frequency":169.43057977169522,"topics":[["Bucket Sort","Divide and Conquer","Math","Binary Indexed Tree","Collapse","Prefix Sum","Breadth-First Search","Recursion","Segment Tree","Tree"]],"languages":[["Go","Dart","JavaScript","Java","C#","Rust","Scala","Swift","C","Erlang"]]},{"title":"23. Merge k Sorted Lists","description":"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.\n\n \nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n\n \nConstraints:\n\n\n\tk == lists.length\n\t0 <= k <= 104\n\t0 <= lists[i].length <= 500\n\t-104 <= lists[i][j] <= 104\n\tlists[i] is sorted in ascending order.\n\tThe sum of lists[i].length will not exceed 104.\n\n","difficulty":"Hard","acceptance":14.185949305838921,"frequency":126.08738476542423,"topics":[["Matrix","Biconnected Component","Suffix Array","Monotonic Queue","Eulerian Circuit","Queue","Reservoir Sampling","Radix Sort","Sorting","Bitmask"]],"languages":[["JavaScript","PHP","C","C#","C++","Python","Python3","Dart","Racket","Go"]]},{"title":"24. Swap Nodes in Pairs","description":"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n \nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\n\nExample 2:\n\nInput: head = []\nOutput: []\n\n\nExample 3:\n\nInput: head = [1]\nOutput: [1]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the list is in the range [0, 100].\n\t0 <= Node.val <= 100\n\n","difficulty":"Medium","acceptance":42.896236296274644,"frequency":140.1599621346001,"topics":[["Sorting","Depth-First Search","Strongly Connected Component","Ordered Set","Database","Bitmask","Divide and Conquer","Iterator","Trie","Greedy"]],"languages":[["Ruby","Go","Dart","TypeScript","Python","Elixir","C++","C#","Rust","Java"]]},{"title":"25. Reverse Nodes in k-Group","description":"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n \nExample 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the list is n.\n\t1 <= k <= n <= 5000\n\t0 <= Node.val <= 1000\n\n\n \nFollow-up: Can you solve the problem in O(1) extra memory space?\n","difficulty":"Hard","acceptance":55.529643887010785,"frequency":180.93327890390975,"topics":[["Binary Search","Merge Sort","Hash Table","String Matching","Bitmask","Rejection Sampling","Combinatorics","Collapse","Binary Search Tree","Tree"]],"languages":[["C#","Kotlin","Erlang","Swift","Elixir","Java","JavaScript","Scala","Go","PHP"]]},{"title":"26. Remove Duplicates from Sorted Array","description":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\n\n\tChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\n\tReturn k.\n\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 3 * 104\n\t-100 <= nums[i] <= 100\n\tnums is sorted in non-decreasing order.\n\n","difficulty":"Easy","acceptance":46.10225273841242,"frequency":76.20514742330292,"topics":[["Stack","Dynamic Programming","Math","Breadth-First Search","Memoization","Prefix Sum","Queue","Strongly Connected Component","Rolling Hash","Linked List"]],"languages":[["C++","JavaScript","TypeScript","Python3","Ruby","C#","Swift","Racket","Erlang","Go"]]},{"title":"27. Remove Element","description":"Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\n\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n\n\n\tChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\n\tReturn k.\n\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \nExample 1:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \nConstraints:\n\n\n\t0 <= nums.length <= 100\n\t0 <= nums[i] <= 50\n\t0 <= val <= 100\n\n","difficulty":"Easy","acceptance":19.979828553084623,"frequency":108.1232057358103,"topics":[["Math","Monotonic Stack","Two Pointers","Randomized","Binary Search Tree","Array","Design","Binary Search","Rejection Sampling","Counting Sort"]],"languages":[["Dart","C++","Ruby","Java","Go","Erlang","Elixir","Scala","C#","Python"]]},{"title":"28. Find the Index of the First Occurrence in a String","description":"Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\n \nExample 1:\n\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\n\nExample 2:\n\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n\n \nConstraints:\n\n\n\t1 <= haystack.length, needle.length <= 104\n\thaystack and needle consist of only lowercase English characters.\n\n","difficulty":"Easy","acceptance":7.5219389627654545,"frequency":176.86707304305665,"topics":[["Reservoir Sampling","Monotonic Stack","Sorting","Divide and Conquer","Backtracking","Database","Simulation","Heap (Priority Queue)","Array","Geometry"]],"languages":[["PHP","Kotlin","Python","C++","Scala","JavaScript","TypeScript","Python3","Racket","Elixir"]]},{"title":"29. Divide Two Integers","description":"Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n\nReturn the quotient after dividing dividend by divisor.\n\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n\n \nExample 1:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n\n\nExample 2:\n\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n\n\n \nConstraints:\n\n\n\t-231 <= dividend, divisor <= 231 - 1\n\tdivisor != 0\n\n","difficulty":"Medium","acceptance":33.82158347399707,"frequency":115.330368279966,"topics":[["Sorting","Topological Sort","Hash Function","Shell","String Matching","Database","Strongly Connected Component","Rejection Sampling","Hash Table","Collapse"]],"languages":[["Scala","Go","TypeScript","Ruby","Racket","Python","Elixir","Python3","Rust","JavaScript"]]},{"title":"30. Substring with Concatenation of All Words","description":"You are given a string s and an array of strings words. All the strings of words are of the same length.\n\nA concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.\n\n\n\tFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated string because it is not the concatenation of any permutation of words.\n\n\nReturn an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n\n \nExample 1:\n\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n\nOutput: [0,9]\n\nExplanation:\n\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n\n\nExample 2:\n\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n\nOutput: []\n\nExplanation:\n\nThere is no concatenated substring.\n\n\nExample 3:\n\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n\nOutput: [6,9,12]\n\nExplanation:\n\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"].\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"].\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"].\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 104\n\t1 <= words.length <= 5000\n\t1 <= words[i].length <= 30\n\ts and words[i] consist of lowercase English letters.\n\n","difficulty":"Hard","acceptance":69.00705395062762,"frequency":112.81365414636899,"topics":[["Simulation","Tree","Iterator","Radix Sort","Merge Sort","Prefix Sum","Depth-First Search","Recursion","Bitmask","Bucket Sort"]],"languages":[["Rust","TypeScript","Python3","Swift","Kotlin","Erlang","Scala","Python","Elixir","Racket"]]},{"title":"31. Next Permutation","description":"A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\n\n\tFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n\n\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n\n\tFor example, the next permutation of arr = [1,2,3] is [1,3,2].\n\tSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\n\tWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n\n\nGiven an array of integers nums, find the next permutation of nums.\n\nThe replacement must be in place and use only constant extra memory.\n\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\n\nExample 2:\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\n\nExample 3:\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 100\n\t0 <= nums[i] <= 100\n\n","difficulty":"Medium","acceptance":71.61796130159301,"frequency":97.90206293615046,"topics":[["Bitmask","Binary Search Tree","Shortest Path","Binary Indexed Tree","Data Stream","Game Theory","Radix Sort","Suffix Array","Recursion","Divide and Conquer"]],"languages":[["C++","PHP","Dart","Go","C#","Ruby","Kotlin","Python3","JavaScript","Java"]]},{"title":"32. Longest Valid Parentheses","description":"Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\n \nExample 1:\n\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\n\nExample 2:\n\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\n\nExample 3:\n\nInput: s = \"\"\nOutput: 0\n\n\n \nConstraints:\n\n\n\t0 <= s.length <= 3 * 104\n\ts[i] is '(', or ')'.\n\n","difficulty":"Hard","acceptance":22.08025347936213,"frequency":170.02298123923075,"topics":[["Geometry","Monotonic Queue","Divide and Conquer","Line Sweep","Eulerian Circuit","Design","Backtracking","Two Pointers","Game Theory","Greedy"]],"languages":[["TypeScript","C","Kotlin","Java","Erlang","C++","Scala","C#","Racket","Dart"]]},{"title":"33. Search in Rotated Sorted Array","description":"There is an integer array nums sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 5000\n\t-104 <= nums[i] <= 104\n\tAll values of nums are unique.\n\tnums is an ascending array that is possibly rotated.\n\t-104 <= target <= 104\n\n","difficulty":"Medium","acceptance":26.792387165852478,"frequency":137.22231686286048,"topics":[["Sliding Window","Interactive","Simulation","Matrix","Segment Tree","Rejection Sampling","Brainteaser","Reservoir Sampling","Shell","Depth-First Search"]],"languages":[["TypeScript","Racket","PHP","Erlang","JavaScript","Ruby","Java","Swift","C++","Go"]]},{"title":"34. Find First and Last Position of Element in Sorted Array","description":"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nExample 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\n \nConstraints:\n\n\n\t0 <= nums.length <= 105\n\t-109 <= nums[i] <= 109\n\tnums is a non-decreasing array.\n\t-109 <= target <= 109\n\n","difficulty":"Medium","acceptance":65.5909075695688,"frequency":174.64482332071714,"topics":[["Doubly-Linked List","Counting Sort","Hash Function","Shell","Segment Tree","Hash Table","Line Sweep","Quickselect","Interactive","Prefix Sum"]],"languages":[["PHP","Swift","Go","Dart","Scala","Ruby","Java","C#","C++","TypeScript"]]},{"title":"35. Search Insert Position","description":"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \nExample 1:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\n\nExample 2:\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\n\nExample 3:\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 104\n\t-104 <= nums[i] <= 104\n\tnums contains distinct values sorted in ascending order.\n\t-104 <= target <= 104\n\n","difficulty":"Easy","acceptance":36.71280558082603,"frequency":52.01543545793154,"topics":[["Union Find","Quickselect","Topological Sort","Geometry","Monotonic Queue","Tree","Heap (Priority Queue)","Counting","Bucket Sort","Shortest Path"]],"languages":[["Python","Scala","Swift","C#","TypeScript","Go","Ruby","Dart","Java","JavaScript"]]},{"title":"36. Valid Sudoku","description":"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n\n\tEach row must contain the digits 1-9 without repetition.\n\tEach column must contain the digits 1-9 without repetition.\n\tEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n\nNote:\n\n\n\tA Sudoku board (partially filled) could be valid but is not necessarily solvable.\n\tOnly the filled cells need to be validated according to the mentioned rules.\n\n\n \nExample 1:\n\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n\n\nExample 2:\n\nInput: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\n\n \nConstraints:\n\n\n\tboard.length == 9\n\tboard[i].length == 9\n\tboard[i][j] is a digit 1-9 or '.'.\n\n","difficulty":"Medium","acceptance":69.00269166039207,"frequency":181.123057843024,"topics":[["Ordered Set","Collapse","Hash Table","Quickselect","Queue","Reservoir Sampling","Bucket Sort","Recursion","Radix Sort","Rolling Hash"]],"languages":[["Elixir","Java","Python3","C","Dart","TypeScript","Racket","Ruby","Scala","Go"]]},{"title":"37. Sudoku Solver","description":"Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n\n\tEach of the digits 1-9 must occur exactly once in each row.\n\tEach of the digits 1-9 must occur exactly once in each column.\n\tEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\n\nThe '.' character indicates empty cells.\n\n \nExample 1:\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n\n \nConstraints:\n\n\n\tboard.length == 9\n\tboard[i].length == 9\n\tboard[i][j] is a digit or '.'.\n\tIt is guaranteed that the input board has only one solution.\n\n","difficulty":"Hard","acceptance":40.601392004481504,"frequency":170.24980676441214,"topics":[["Rejection Sampling","Stack","Game Theory","Probability and Statistics","Binary Indexed Tree","Number Theory","Divide and Conquer","Eulerian Circuit","Graph","Monotonic Stack"]],"languages":[["Ruby","Swift","Python3","JavaScript","Java","Python","Go","C#","Kotlin","PHP"]]},{"title":"38. Count and Say","description":"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\n\n\tcountAndSay(1) = \"1\"\n\tcountAndSay(n) is the run-length encoding of countAndSay(n - 1).\n\n\nRun-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\n\nGiven a positive integer n, return the nth element of the count-and-say sequence.\n\n \nExample 1:\n\n\nInput: n = 4\n\nOutput: \"1211\"\n\nExplanation:\n\ncountAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\"\n\n\n\nExample 2:\n\n\nInput: n = 1\n\nOutput: \"1\"\n\nExplanation:\n\nThis is the base case.\n\n\n \nConstraints:\n\n\n\t1 <= n <= 30\n\n\n \nFollow up: Could you solve it iteratively?","difficulty":"Medium","acceptance":8.69692492119002,"frequency":171.2352249943226,"topics":[["Bit Manipulation","Tree","Bitmask","Enumeration","Union Find","Probability and Statistics","Reservoir Sampling","Greedy","Biconnected Component","Breadth-First Search"]],"languages":[["Elixir","Java","Dart","C++","Rust","PHP","Racket","Ruby","Python","Erlang"]]},{"title":"39. Combination Sum","description":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n\n \nExample 1:\n\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n\n\nExample 2:\n\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n\n\nExample 3:\n\nInput: candidates = [2], target = 1\nOutput: []\n\n\n \nConstraints:\n\n\n\t1 <= candidates.length <= 30\n\t2 <= candidates[i] <= 40\n\tAll elements of candidates are distinct.\n\t1 <= target <= 40\n\n","difficulty":"Medium","acceptance":15.421016992821713,"frequency":66.0723007364426,"topics":[["Shortest Path","Array","Concurrency","Interactive","Sliding Window","Memoization","Database","Counting Sort","Strongly Connected Component","Game Theory"]],"languages":[["Elixir","Scala","Kotlin","Java","Python3","Python","Swift","JavaScript","C#","C++"]]},{"title":"40. Combination Sum II","description":"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n\nEach number in candidates may only be used once in the combination.\n\nNote: The solution set must not contain duplicate combinations.\n\n \nExample 1:\n\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\n\nExample 2:\n\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n\n\n \nConstraints:\n\n\n\t1 <= candidates.length <= 100\n\t1 <= candidates[i] <= 50\n\t1 <= target <= 30\n\n","difficulty":"Medium","acceptance":40.180204764944456,"frequency":113.1261382275985,"topics":[["Randomized","Math","Biconnected Component","Strongly Connected Component","Binary Search","Depth-First Search","Geometry","Two Pointers","Union Find","Merge Sort"]],"languages":[["Elixir","Go","Swift","C","Dart","Racket","Python3","C#","Python","TypeScript"]]},{"title":"41. First Missing Positive","description":"Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\n\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n\n \nExample 1:\n\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\n\nExample 2:\n\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\n\nExample 3:\n\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 105\n\t-231 <= nums[i] <= 231 - 1\n\n","difficulty":"Hard","acceptance":23.44957955647494,"frequency":93.38955288626823,"topics":[["Counting","Bit Manipulation","Biconnected Component","Divide and Conquer","Data Stream","Shell","Segment Tree","String","Quickselect","Merge Sort"]],"languages":[["Erlang","Racket","Elixir","Scala","Java","Go","Ruby","Rust","TypeScript","JavaScript"]]},{"title":"42. Trapping Rain Water","description":"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\n \nExample 1:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n\n \nConstraints:\n\n\n\tn == height.length\n\t1 <= n <= 2 * 104\n\t0 <= height[i] <= 105\n\n","difficulty":"Hard","acceptance":27.124385255911434,"frequency":143.32591594138822,"topics":[["Matrix","Greedy","Monotonic Stack","Rejection Sampling","Queue","Sliding Window","Graph","Sorting","Two Pointers","Stack"]],"languages":[["Rust","Ruby","Python","TypeScript","Elixir","Dart","PHP","Swift","Kotlin","Go"]]},{"title":"43. Multiply Strings","description":"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n \nExample 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\nExample 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n \nConstraints:\n\n\n\t1 <= num1.length, num2.length <= 200\n\tnum1 and num2 consist of digits only.\n\tBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\n\n","difficulty":"Medium","acceptance":60.09806805124581,"frequency":94.2000587656033,"topics":[["String Matching","Heap (Priority Queue)","Rolling Hash","Binary Search","Quickselect","Topological Sort","Monotonic Queue","Bitmask","String","Stack"]],"languages":[["Go","Elixir","C#","C","PHP","Rust","JavaScript","Python","TypeScript","Scala"]]},{"title":"44. Wildcard Matching","description":"Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n\n\t'?' Matches any single character.\n\t'*' Matches any sequence of characters (including the empty sequence).\n\n\nThe matching should cover the entire input string (not partial).\n\n \nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\n\n\nExample 3:\n\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\n \nConstraints:\n\n\n\t0 <= s.length, p.length <= 2000\n\ts contains only lowercase English letters.\n\tp contains only lowercase English letters, '?' or '*'.\n\n","difficulty":"Hard","acceptance":17.07690847951566,"frequency":110.85727054265297,"topics":[["Enumeration","Prefix Sum","Matrix","Stack","Concurrency","Union Find","Combinatorics","Two Pointers","Hash Table","Monotonic Queue"]],"languages":[["Dart","Scala","PHP","C#","Java","Python3","C","Swift","Kotlin","Erlang"]]},{"title":"45. Jump Game II","description":"You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n\n\n\t0 <= j <= nums[i] and\n\ti + j < n\n\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n\n \nExample 1:\n\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n\nExample 2:\n\nInput: nums = [2,3,0,1,4]\nOutput: 2\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 104\n\t0 <= nums[i] <= 1000\n\tIt's guaranteed that you can reach nums[n - 1].\n\n","difficulty":"Medium","acceptance":8.499042605230041,"frequency":169.86393588646416,"topics":[["Stack","Rolling Hash","Collapse","Hash Function","Graph","Math","Quickselect","Simulation","Bitmask","Bucket Sort"]],"languages":[["C#","JavaScript","Rust","Elixir","Python3","Swift","Racket","C++","Scala","TypeScript"]]},{"title":"46. Permutations","description":"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n\n \nExample 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nExample 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\nExample 3:\nInput: nums = [1]\nOutput: [[1]]\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 6\n\t-10 <= nums[i] <= 10\n\tAll the integers of nums are unique.\n\n","difficulty":"Medium","acceptance":67.58500838771742,"frequency":0.8073911979668247,"topics":[["Dynamic Programming","Geometry","Brainteaser","Matrix","Shell","Binary Tree","Combinatorics","Enumeration","Divide and Conquer","Binary Indexed Tree"]],"languages":[["Dart","JavaScript","Elixir","Scala","Ruby","TypeScript","C#","Python","Erlang","C++"]]},{"title":"47. Permutations II","description":"Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 8\n\t-10 <= nums[i] <= 10\n\n","difficulty":"Medium","acceptance":58.00127673294707,"frequency":171.81804033767924,"topics":[["Binary Search Tree","Linked List","String","Iterator","Bit Manipulation","Queue","Union Find","Minimum Spanning Tree","Monotonic Stack","Probability and Statistics"]],"languages":[["Rust","Java","TypeScript","Python3","Kotlin","Racket","Elixir","Ruby","C","Erlang"]]},{"title":"48. Rotate Image","description":"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n \nExample 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\n\nExample 2:\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n\n \nConstraints:\n\n\n\tn == matrix.length == matrix[i].length\n\t1 <= n <= 20\n\t-1000 <= matrix[i][j] <= 1000\n\n","difficulty":"Medium","acceptance":14.454282057206106,"frequency":0.18078228276793595,"topics":[["Two Pointers","Binary Indexed Tree","Dynamic Programming","Database","Bitmask","Biconnected Component","Counting","Matrix","Divide and Conquer","Merge Sort"]],"languages":[["Rust","JavaScript","Dart","C#","Racket","Erlang","C++","Kotlin","Java","PHP"]]},{"title":"49. Group Anagrams","description":"Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n \nExample 1:\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nExample 2:\nInput: strs = [\"\"]\nOutput: [[\"\"]]\nExample 3:\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]\n\n \nConstraints:\n\n\n\t1 <= strs.length <= 104\n\t0 <= strs[i].length <= 100\n\tstrs[i] consists of lowercase English letters.\n\n","difficulty":"Medium","acceptance":17.974609449568437,"frequency":98.82034995638067,"topics":[["Hash Table","Merge Sort","Binary Search Tree","Two Pointers","Dynamic Programming","Recursion","Concurrency","Backtracking","Queue","Sliding Window"]],"languages":[["Kotlin","Elixir","Swift","Python3","TypeScript","C#","C++","Python","Dart","Go"]]},{"title":"50. Pow(x, n)","description":"Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n\n \nExample 1:\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\n\nExample 2:\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\n\nExample 3:\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\n\n \nConstraints:\n\n\n\t-100.0 < x < 100.0\n\t-231 <= n <= 231-1\n\tn is an integer.\n\tEither x is not zero or n > 0.\n\t-104 <= xn <= 104\n\n","difficulty":"Medium","acceptance":70.25927919590148,"frequency":178.1118716760339,"topics":[["Merge Sort","Radix Sort","Counting Sort","Brainteaser","Minimum Spanning Tree","Line Sweep","Binary Tree","Binary Search","String","Stack"]],"languages":[["Go","JavaScript","Racket","Python","Scala","C++","Rust","Ruby","Erlang","Swift"]]}]